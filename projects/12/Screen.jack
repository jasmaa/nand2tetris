// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array twoToThe;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        var int j;
        let j = 1;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        while (j < 16) {
            let twoToThe[j] = twoToThe[j-1] + twoToThe[j-1];
            let j = j + 1;
        }
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        // Iterate over every word in screen memory
        while (i < 8192) {
            do Memory.poke(16384 + i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, j;
        let addr = 16384 + (32*y) + (x/16);
        let j = x - (16*(x/16));
        if (color) {
            do Memory.poke(addr, Memory.peek(addr) | twoToThe[j]);
        } else {
            do Memory.poke(addr, Memory.peek(addr) & (~twoToThe[j]));
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, adyMinusbdx;
        var boolean isDxNeg, isDyNeg;
        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let adyMinusbdx = 0;

        let isDxNeg = false;
        if (dx < 0) {
            let isDxNeg = true;
            let dx = -dx;
        }

        let isDyNeg = false;
        if (dy < 0) {
            let isDyNeg = true;
            let dy = -dy;
        }

        while ((a < dx) | (b < dy)) {
            if (isDxNeg & isDyNeg) {
                do Screen.drawPixel(x1 - a, y1 - b);
            } else {
                if (isDxNeg) {
                    do Screen.drawPixel(x1 - a, y1 + b);
                } else {
                    if (isDyNeg) {
                        do Screen.drawPixel(x1 + a, y1 - b);
                    } else {
                        do Screen.drawPixel(x1 + a, y1 + b);
                    }
                }
            }

            if (adyMinusbdx < 0) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + dy;
            } else {
                let b = b + 1;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (y1 < y2) {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, xDist;
        let dy = -r;
        while (dy < r) {
            let xDist = Math.sqrt((r*r) - (dy*dy));
            do Screen.drawLine(x-xDist, y+dy, x+xDist, y+dy);
            let dy = dy + 1;
        }
        return;
    }
}
