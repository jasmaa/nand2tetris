// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array arr;
    field int maxLen, len;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let maxLen = maxLength;
        if (maxLength > 0) {
            let arr = Array.new(maxLength);
        }
        let len = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (maxLen > 0) {
            do arr.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let arr[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let arr[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let len = len - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int n, i;
        var boolean isNeg;
        let n = 0;
        let i = 0;
        let isNeg = false;

        // Detect negative
        if (arr[i] = 45) {
            let isNeg = true;
            let i = i + 1;
        }

        while (i < len) {
            let n = (10*n) + (arr[i] - 48);
            let i = i + 1;
        }

        if (isNeg) {
            return -n;
        }
        return n;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int n, i, prelen;
        var boolean isNeg;

        // Detect negative
        let isNeg = false;
        if (val < 0) {
            let isNeg = true;
        }

        let val = Math.abs(val);

        // Get and set length of val
        let n = val;
        let prelen = 1;
        while (n > 9) {
            let n = n / 10;
            let prelen = prelen + 1;
        }

        let len = prelen;
        if (isNeg) {
            let len = len + 1;
        }

        // Convert to string
        if (isNeg) {
            let arr[0] = 45;
        }
        let i = 0;
        while (i < prelen) {
            let arr[(len-1)-i] = (val - (10*(val/10))) + 48;
            let val = val / 10;
            let i = i + 1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
