// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let memory = 0;

        // Init free list with entire heap as first block
        let freeList = 2050;                // freeList = heapBase + 2
        let memory[freeList-1] = 14334;     // freeList.length = heapEnd - (heapBase+2)
        let memory[freeList-2] = -1;        // freeList.next = null
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int curr, prev, tempAddr, tempLen, tempNext;
        let prev = -1;
        let curr = freeList;

        // Search for suitable block using first-fit
        while (~(curr = -1) & memory[curr-1] < size) {
            let prev = curr;
            let curr = memory[curr-2];
        }

        // End of list, no more memory
        if (curr = -1) {
            return -1;
        }

        // Save old values
        let tempAddr = curr;
        let tempLen = memory[curr-1];
        let tempNext = memory[curr-2];

        // Set values for allocated block
        let memory[curr-1] = size;
        let memory[curr-2] = null;

        // Allocate memory and update values
        let curr = curr + (size+2);
        let memory[curr-1] = tempLen - (size+2);
        let memory[curr-2] = tempNext;

        if (prev = -1) {
            // Update freeList if modifying head
            let freeList = curr;
        } else {
            // Otherwise, update prev.next
            let memory[prev-2] = curr;
        }

        return tempAddr;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int curr, prev;

        // Find current tail
        let prev = -1;
        let curr = freeList;
        while (~(curr = -1)) {
            let prev = curr;
            let curr = memory[curr-2];
        }

        // Append to list
        let memory[prev-2] = o;
        let memory[o-2] = -1;
        return;
    }    
}
